/*Antonio Wiege*/
#pragma kernel ND3Linear
#pragma kernel ND2Linear
//booleans cannot be set, using floats 0 = false everything else true
float planarize=0;
float choppy=0;
float turbulent=0;//invert to get ridge
float invert=0;//together with turbulent to get ridge
float distortSpace=0;
//regular values ; pre-assigning values does not work in here, the written values are merely standard suggestions
RWStructuredBuffer<float> Output;//linear layout
int dispatchThreadGroupCountX=4;
StructuredBuffer<float3> DistortionData;//overwrite local block pos

int resultApplicationID;
float weight;

float planarizeAtY=0;
float planarizeIntensity=0;

float4 position=float4(0,0,0,0);//x,y,z,w with w e.g. bias, seed, etc
int noiseDimensionCount=4;

float4 size=1;
float4 rotation;

float octaveStartSize=2;
int octaveCount=5;
float octaveStepPow=2;
float octaveInfluenceBias=1;

float multiplyWith=1;
float addPostMultiply = 0;
float clampEndResultMin = 0;
float clampEndResultMax = 1;

//method head definitions
float4 Rotate(float4 p);

float ValueNoiseLinear(float4 pos, float size);

float InterpolateLinear(float P1,float P2,  float t);

float GridFloor(float value, float gridSize);
float2 GridFloor(float2 value, float gridSize);
float3 GridFloor(float3 value, float gridSize);
float4 GridFloor(float4 value, float gridSize);

float Hash2Float(uint hash);

uint Hash0(float seed);
uint Hash1(float seed);
uint Hash2(float seed);
uint Hash3(float seed);
uint Hash4(float seed);
uint Hash5(float seed);
uint Hash6(float seed);
uint Hash7(float seed);

[numthreads(8,8,1)]
void ND2Linear (uint3 id : SV_DispatchThreadID)
{
    float value = 0;
    float div = 0;
    float scale = 1;
    int cid = id.x + id.y * dispatchThreadGroupCountX;
    float4 pos =  (float4(id.x, id.y, 0, 0)+position+((distortSpace==0)?0:float4(DistortionData[cid].x,DistortionData[cid].y,DistortionData[cid].z,0)))*size;
        for (int o = octaveStartSize; o < octaveStartSize+octaveCount; o++)
        {
            scale = pow(abs(octaveStepPow), o);
        value +=   abs(ValueNoiseLinear(pos, scale) *pow(scale,octaveInfluenceBias)- ((choppy!=0)?0.5:0))*((choppy!=0)?2:1);
            div +=pow(scale,octaveInfluenceBias);
        }
   value /= (div<1)?1:div;
   value= (turbulent!=0)?abs ((value-0.5)*2):value;
  value= (invert!=0)?1-value:value;
     value = clamp(value*multiplyWith+addPostMultiply-
        ((planarize!=0)?planarizeIntensity*(pos.y-planarizeAtY):0),
        clampEndResultMin,clampEndResultMax);

  switch(resultApplicationID){
      case 1:
      Output[cid] += value*weight;
      break;
      case 2:
      Output[cid] -= value*weight;
      break;
      case 3:
      Output[cid] *= value*weight;
      break;
      case 4:
      Output[cid] /= (value*weight==0)?1:value*weight;//do not divide by zero my friend
      break;
      case 5:
      Output[cid] = value*(.5+weight*.5)+Output[cid]*(.5-weight*.5);//deprecated:weight==0?Output[cid]:
      break;
      case 6:
      Output[cid] %= value;
      break;
      case 7:
      Output[cid] = abs(value-Output[cid]);
      break;
      default:
      Output[cid] = value;
      break;
      }
}

[numthreads(4,4,4)]
void ND3Linear (uint3 id : SV_DispatchThreadID)
{
     float value = 0;
    float div = 0;
    float scale = 1;
    int cid = id.x + id.y * dispatchThreadGroupCountX + id.z * dispatchThreadGroupCountX*dispatchThreadGroupCountX;
    float4 pos =(float4(id.x, id.y, id.z, 0)+position+((distortSpace==0)?0:float4(DistortionData[cid].x,DistortionData[cid].y,DistortionData[cid].z,0)))*size;
        for (int o = octaveStartSize; o < octaveStartSize+octaveCount; o++)
        {
            scale = pow(abs(octaveStepPow), o);
        value +=   abs(ValueNoiseLinear(pos, scale) *pow(scale,octaveInfluenceBias)- ((choppy!=0)?0.5:0))*((choppy!=0)?2:1);
            div += pow(scale,octaveInfluenceBias);
        }
   value /= (div<1)?1:div;
   value= (turbulent!=0)?abs ((value-0.5)*2):value;
  value= (invert!=0)?1-value:value;
    value = clamp(value*multiplyWith+addPostMultiply-
        ((planarize!=0)?planarizeIntensity*(pos.y-planarizeAtY):0),
        clampEndResultMin,clampEndResultMax);

  switch(resultApplicationID){
      case 1:
      Output[cid] += value*weight;
      break;
      case 2:
      Output[cid] -= value*weight;
      break;
      case 3:
      Output[cid] *= value*weight;
      break;
      case 4:
      Output[cid] /= (value*weight==0)?1:value*weight;//do not divide by zero my friend
      break;
      case 5:
      Output[cid] = value*(.5+weight*.5)+Output[cid]*(.5-weight*.5);//deprecated:weight==0?Output[cid]:
      break;
      case 6:
      Output[cid] %= value;
      break;
      case 7:
      Output[cid] = abs(value-Output[cid]);
      break;
      default:
      Output[cid] = value;
      break;
      }
}

//Rotation happens in 3D space. The rotation defines a vector in xyz plus the angle w to rotate around it (w 1 = 360 | 2PI)
  float4 Rotate(float4 p){
                //from here https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/
                if(length(rotation.xyz)==0)rotation.y=1;
                float ha =  rotation.w*3.14159265358979323846264338;
                float3 n = normalize(rotation.xyz);
                float4 q = float4(
                n.x * sin(ha),
                n.y * sin(ha),
                n.z * sin(ha),
                cos(ha));
     //from here https://code.google.com/archive/p/kri/wikis/Quaternions.wiki
     float3 v = float3(p.x,p.y,p.z);
     float3 o = v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
     return float4(o.x,o.y,o.z,p.w);
    }

float ValueNoiseLinear(float4 pos, float size)
{
    pos = Rotate(pos);

    float4 o = GridFloor(pos,size); //original in size space
    float4 p = o * size; //stepped in real space
    float4 r = (pos - p) / size; //0-1 pos within step
    
   float points[16];
    for (int w = 0; w <= 1; w++) 
    {
        for (int z = 0; z <= 1; z++)
        {
            for (int y = 0; y <= 1; y++)
            {
                for (int x = 0; x <= 1; x++)
                {
                    int id = x + y * 2 + z * 4 + w * 8;
                    points[id] = Hash2Float(
                 ((noiseDimensionCount>0)?       Hash1(p.x + x * size):1) * 
                      ((noiseDimensionCount>1)?     Hash2(p.y + y * size):1) *
                      ((noiseDimensionCount>2)?     Hash3(p.z + z * size) :1)* 
                      ((noiseDimensionCount>3)?     Hash4(p.w + w * size):1));
                }
            }
        }
    }
    int i = 0;

      for (i = 0; i < 8; i++)
    {
        points[i * 2]=InterpolateLinear(points[i * 2], points[i*2+1],r.x); 
    }
    for (i = 0; i < 4; i++)
    {
        points[i * 4]=InterpolateLinear(points[i * 4], points[i*4+2],r.y); 
    }
    for (i = 0; i < 2; i++)
    {
        points[i * 8]=InterpolateLinear(points[i * 8], points[i*8+4],r.z); 
    }
    return InterpolateLinear(points[0], points[8], r.w);
}

float InterpolateLinear(float P1,float P2, float t)//Linear Interpolation, http://paulbourke.net/miscellaneous/interpolation/
{
    return P1 * (1 - t) + P2 * t;
}



    float GridFloor(float value, float gridSize)
    {
        float r = (value-value%gridSize)/gridSize;
        if( value < 0 && gridSize > value) r-=1;
        return r;
    }

       float2 GridFloor(float2 value, float gridSize)
    {
        return float2(GridFloor(value.x, gridSize), GridFloor(value.y, gridSize));
    }

       float3 GridFloor(float3 value, float gridSize)
    {
        return float3(GridFloor(value.x, gridSize), GridFloor(value.y, gridSize), GridFloor(value.z, gridSize));
    }

      float4 GridFloor(float4 value, float gridSize)
    {
        return float4(GridFloor(value.x, gridSize), GridFloor(value.y, gridSize), GridFloor(value.z, gridSize),GridFloor(value.w, gridSize));
    }



    /*
Note on RNG:

Tried using the usual shader way with dot & frac -> smaller coordinate coverage and more questionable quality.
Tried combining with passed presets (range of numbers to pick from) -> more rng controll & overhead not worth over post control.
 Other custom things so far.. just no.
 Current Hash implementation based on https://burtleburtle.net/bob/hash/integer.html, https://burtleburtle.net/bob/hash/integer.html & based off of from H. Schechter & R. Bridson, goo.gl/RXiKaH
*/

float Hash2Float(uint hash)
{
    return clamp(float(hash) / 4294967295.0,-1,1); // 2^32-1
}

uint Hash0(float seed)
{
    uint s = asuint(seed - 1367.97546) - 2437962429u;
    s ^= 1331311319u;
    s *= 1954568973u;
    s ^= s >> 17;
    s *= 2987348578u;
    s ^= s >> 13;
    s *= 1862398427u;
    return s;
}

uint Hash1(float seed)
{
    uint s = asuint(seed + 3573.217801) + 3456735731u;
    s ^= s << 13;
    s *= 3698471546u;
    s ^= s >> 17;
    s *= 1876428345u;
    s ^= s << 5;
    return s;
}

uint Hash2(float seed)
{
    uint s = asuint(seed + 4823.753849) + 1863897315u;
    s = (s ^ 61) ^ (s >> 16);
    s *= 9;
    s = s ^ (s >> 4);
    s *= 668265261u;
    s = s ^ (s >> 15);
    return s;
}

uint Hash3(float seed)
{
    uint s = asuint(seed - 5886.34896) - 2887962599u;
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

uint Hash4(float seed)
{
    uint s = asuint(seed - 5846.34896) - 1887962593u;
    s ^= 1747636419u;
    s *= 3654435769u;
    s ^= s >> 11;
    s *= 1654435769u;
    s ^= s >> 14;
    s *= 3654435769u;
    return s;
}

    uint Hash5(float seed)
{
    uint s = asuint(seed + 7645.35896) + 2938475611u;
    s ^= s << 18;
    s *= 3698471546u;
    s ^= s >> 14;
    s *= 1876428345u;
    s ^= s << 7;
    return s;
}

uint Hash6(float seed)
{
    uint s = asuint(seed + 2387.357890) + 3847562931u;
    s = (s ^ 13) ^ (s >> 31);
    s *= 6;
    s = s ^ (s >> 3);
    s *= 886265269u;
    s = s ^ (s >> 17);
    return s;
}

uint Hash7(float seed)
{
    uint s = asuint(seed - 1999.86401) - 3928374651u;
    s ^= 1918275634u;
    s *= 3029385716u;
    s ^= s >> 17;
    s *= 1295847452u;
    s ^= s >> 17;
    s *= 1928636475u;
    return s;
}